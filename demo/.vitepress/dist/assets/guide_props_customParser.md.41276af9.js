import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.2f75be1e.js";
const __pageData = '{"title":"Custom Parser","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u914D\u7F6E\u793A\u4F8B","slug":"\u914D\u7F6E\u793A\u4F8B"}],"relativePath":"guide/props/customParser.md","lastUpdated":1666452096533}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="custom-parser" tabindex="-1">Custom Parser <a class="header-anchor" href="#custom-parser" aria-hidden="true">#</a></h1><p>\u81EA\u5B9A\u4E49\u89E3\u6790\u5668</p><ul><li><p><strong>\u7C7B\u578B\uFF1A</strong> <code>Array&lt;(template: string) =&gt; string&gt;</code></p></li><li><p><strong>\u8BE6\u7EC6\u4FE1\u606F</strong></p></li></ul><p>\u81EA\u5B9A\u4E49\u8BED\u6CD5\u89E3\u6790\u5668</p><h2 id="\u914D\u7F6E\u793A\u4F8B" tabindex="-1">\u914D\u7F6E\u793A\u4F8B <a class="header-anchor" href="#\u914D\u7F6E\u793A\u4F8B" aria-hidden="true">#</a></h2><div class="language-ts"><pre><code><span class="line"><span style="color:#758575;">//\u81EA\u5B9A\u4E49\u89E3\u6790\u5668</span></span>\n<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#D4976C;">customParser</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">[</span></span>\n<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#858585;">(</span><span style="color:#B8A965;">template</span><span style="color:#CB7676;">:</span><span style="color:#DBD7CA;"> </span><span style="color:#E0A569;">string</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=&gt;</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>\n<span class="line"><span style="color:#858585;">    </span><span style="color:#758575;">//&lt;my-code&gt; \u7EC4\u4EF6\u8BED\u6CD5\u89E3\u6790</span></span>\n<span class="line"><span style="color:#858585;">    </span><span style="color:#758575;">//Parse code RegExp</span></span>\n<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#CB7676;">let</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">templateReplaceContent</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">template</span></span>\n<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#D4976C;">reg</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span></span>\n<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#C98A7D;">/</span><span style="color:#C4704F;"> </span><span style="color:#CB7676;">{0,3}</span><span style="color:#D4976C;">\\n</span><span style="color:#CB7676;">*</span><span style="color:#858585;">(</span><span style="color:#C4704F;">`</span><span style="color:#CB7676;">{3,}</span><span style="color:#858585;">(?=[</span><span style="color:#CB7676;">^</span><span style="color:#D4976C;">`\\n</span><span style="color:#858585;">]</span><span style="color:#CB7676;">*</span><span style="color:#D4976C;">\\n</span><span style="color:#858585;">)</span><span style="color:#CB7676;">|</span><span style="color:#C4704F;">~</span><span style="color:#CB7676;">{3,}</span><span style="color:#858585;">)([</span><span style="color:#CB7676;">^</span><span style="color:#D4976C;">\\n</span><span style="color:#858585;">]</span><span style="color:#CB7676;">*</span><span style="color:#858585;">)</span><span style="color:#D4976C;">\\n</span><span style="color:#858585;">(?:</span><span style="color:#CB7676;">|</span><span style="color:#858585;">([</span><span style="color:#D4976C;">\\s\\S</span><span style="color:#858585;">]</span><span style="color:#CB7676;">*?</span><span style="color:#858585;">)</span><span style="color:#D4976C;">\\n</span><span style="color:#858585;">)(?:</span><span style="color:#C4704F;"> </span><span style="color:#CB7676;">{0,3}</span><span style="color:#4D9375;">\\1</span><span style="color:#858585;">[</span><span style="color:#D4976C;">~`</span><span style="color:#858585;">]</span><span style="color:#CB7676;">*</span><span style="color:#C4704F;"> </span><span style="color:#CB7676;">*</span><span style="color:#858585;">(?=</span><span style="color:#D4976C;">\\n</span><span style="color:#CB7676;">|</span><span style="color:#4D9375;">$</span><span style="color:#858585;">)</span><span style="color:#CB7676;">|</span><span style="color:#4D9375;">$</span><span style="color:#858585;">)</span><span style="color:#C98A7D;">/</span><span style="color:#4D9375;">g</span></span>\n<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#4D9375;">if</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">(</span><span style="color:#B8A965;">reg</span><span style="color:#858585;">.</span><span style="color:#A1B567;">test</span><span style="color:#858585;">(</span><span style="color:#B8A965;">template</span><span style="color:#858585;">))</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>\n<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#B8A965;">templateReplaceContent</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">template</span><span style="color:#858585;">.</span><span style="color:#A1B567;">replace</span><span style="color:#858585;">(</span><span style="color:#B8A965;">reg</span><span style="color:#858585;">,</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">(</span><span style="color:#CB7676;">...</span><span style="color:#B8A965;">arg</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=&gt;</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>\n<span class="line"><span style="color:#DBD7CA;">        </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CA;"> </span><span style="color:#D4976C;">lang</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">arg</span><span style="color:#858585;">[</span><span style="color:#6394BF;">2</span><span style="color:#858585;">].</span><span style="color:#A1B567;">trim</span><span style="color:#858585;">()</span></span>\n<span class="line"><span style="color:#DBD7CA;">        </span><span style="color:#CB7676;">let</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">code</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">arg</span><span style="color:#858585;">[</span><span style="color:#6394BF;">3</span><span style="color:#858585;">]</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">??</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">&#39;&#39;</span></span>\n<span class="line"><span style="color:#DBD7CA;">        </span><span style="color:#4D9375;">if</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">(</span><span style="color:#B8A965;">code</span><span style="color:#858585;">)</span><span style="color:#DBD7CA;"> </span><span style="color:#858585;">{</span></span>\n<span class="line"><span style="color:#DBD7CA;">          </span><span style="color:#B8A965;">code</span><span style="color:#DBD7CA;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">code</span><span style="color:#858585;">.</span><span style="color:#A1B567;">replaceAll</span><span style="color:#858585;">(</span><span style="color:#C98A7D;">`&quot;`</span><span style="color:#858585;">,</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">`\u4EBB`</span><span style="color:#858585;">)</span></span>\n<span class="line"><span style="color:#DBD7CA;">        </span><span style="color:#858585;">}</span></span>\n<span class="line"><span style="color:#DBD7CA;">        </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CA;"> </span><span style="color:#C98A7D;">`&lt;my-code lang=&quot;</span><span style="color:#858585;">${</span><span style="color:#C98A7D;">lang</span><span style="color:#858585;">}</span><span style="color:#C98A7D;">&quot; code=&quot;</span><span style="color:#858585;">${</span><span style="color:#C98A7D;">code</span><span style="color:#858585;">}</span><span style="color:#C98A7D;">&quot;&gt;&lt;/my-code&gt;`</span></span>\n<span class="line"><span style="color:#DBD7CA;">      </span><span style="color:#858585;">})</span></span>\n<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#858585;">}</span></span>\n<span class="line"><span style="color:#DBD7CA;">    </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CA;"> </span><span style="color:#B8A965;">templateReplaceContent</span></span>\n<span class="line"><span style="color:#DBD7CA;">  </span><span style="color:#858585;">}</span></span>\n<span class="line"><span style="color:#858585;">]</span></span>\n<span class="line"></span></code></pre></div>', 6);
const _hoisted_7 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_7);
}
var customParser = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, customParser as default };
